CLASS:: Convenience

SUMMARY:: Load audio files into collections of buffers and sequence/granulate them

CATEGORIES:: Monsters of Arguments, Convenience, Semi Undocumented Classes

RELATED:: Overviews/ConvenientOverview


DESCRIPTION::

A tool for discovering surprising audio file mixtures.

please note that all methods are instance methods (there is only Ã³ne instance of Convenience)

CLASSMETHODS::

METHOD:: crawl

crawler loads folders of files for you. mono and stereo.

METHOD:: p

create a pattern sequencer and play it, this always holds a LeakDC and Limiter in the end of it's chain

METHOD:: s

stop pattern sequencer

METHOD:: sall

stop all pattern sequencers

METHOD:: repeat

repeat part of the pattern "history", can be used a bit like a random sampler

METHOD:: get

return Buffer at folderkey and index

METHOD:: free

free all buffers or just the specified one

METHOD:: size

returns number of files loaded in total

METHOD:: list
posts loaded folder keys and number of files in them
and returns a dictionary with folder keys and buffers
if gui: true = a list view will open

METHOD:: folders

returns a set of loaded folder keys

METHOD:: randomFolder

return random folder key

METHOD:: folderNum

returns folder key at dict key index, if you need to think in integers

METHOD:: pp

get or set parameter (pattern)

METHOD:: fade

set fade time of pattern sequence and fxs

METHOD:: pfx

add fx to a pattern sequencer

EXAMPLES::

CODE::

// load some soundfiles with a gui -> crawler loads folders
C.crawl

// no gui usage example
// check your resource directory, it should have some default SC sounds
Platform.resourceDir +/+ "sounds".openOS;
// if this does not work due to some xdg sillyness etc.
// check with this
PathName(Platform.resourceDir+/+"sounds").entries.do{|f|"\tsoundfile - %".format(f.fileName).postln}
// using that path we should be able to load the folder called 'sounds'
C.crawl(Platform.resourceDir +/+ "sounds", depth: 0);

s.boot; 
/* Convenience will only load files into ram if the server is running
if you want to know what folders .crawl found before booting server use 'Convenience.folderPaths' to return a dictionary */

C.crawl("path/to/some/file.wav")
// loads single audio file and places bufnum at key 'CFiles'

Convenience.list // post some info of what went down
Convenience.list(gui: true) // or open a small gui window listing folders and buffer amounts
Convenience.list(1); // same

// free all buffers or free a specified folder
Convenience.free
Convenience.free(\sounds)


//play some buffers - minimum is giving the .p method a name
Convenience.p(\lay); // play at the beginning of first file in first folder with default duration and rate
Convenience.s(\lay); // stop

// post all arguments/parameters of Convenience.p
Convenience.properties.do{|property| property.key.postln}
C.properties.postcs

// play with parameters
(
Convenience.p(\lay,
    seed: 1234.rand,
    tempo: 8.0,
    folder: \sounds,
    index: Prand((1..4), inf),
    pos: Pwhite(0.2,0.7),
    dur: Pseq([1,3,Rest(2),2], inf),
    rate: Pwhite(0.9,1.0) * Pstep([0.4,0.9,0.2], Prand([3,5,8], inf), inf),
    pan: Pwhite(-0.65,0.65),
    amp: 0.4
);
)
// slay
Convenience.s(\lay)

// load some more folders
Convenience.crawl

// pitchshift a random folder
(
Convenience.p(\psrand,
    seed: 1234.rand,
	tempo: 145/60*4,
	tuningOnOff: 1,
	degree: Pseq([1,4,6,9], inf),
	octave: Pseq([4,5,6], inf),
	pst: 1,              // pitchift on/off
	pr: Pwhite(2.2,4.5), // pitch ratio
	fr: Pwhite(0.8,5.2), // formant ratio
	folder: Convenience.randomFolder.postln,
	index: Pwhite(1,100),
	cutoff: Pwhite(500,12000),
	res: 0.5,
	ftype: Prand([0,1], inf), // lowpass/hipass
	pos: 0,
	dur: Pstutter(rrand(1,6), Pwhite(0.5,2.0)),
	rate: Pwhite(0.9,1.0) * Pstep([0.4,0.9,0.2], Prand([3,5,8], inf), inf)+3,
	pan: Pwhite(-0.65,0.65),
	amp: 0.4,
	release: 2.0
);
)

// repeat some events
C.repeat('psrand', 4, 9)

// change the filter resonans, degree and tempo param on the fly
Convenience.pp(\psrand, 'res', 0.96);
Convenience.pp(\psrand, 'res', Pseq([0.5,0.75,0.9,0.2], inf));
Convenience.pp(\psrand, 'degree', 1);
Convenience.pp(\psrand, 'tempo', 5);

// add some fxs (insert kinda)
// will probably soon be removed/changed
(
Convenience.pfx(\psrand, [\delay, \flanger],
	\wet1, 0.2,
	\delay, Pwhite(0.2, 0.8),
	\delayfb, Pseq([0.1,0.4,0.8], inf),
	\wet2, Pseq((1..50)/50, inf).trace,
	\flangdelay, 0.99,
	\flangdepth, 0.1,
	\flangrate, 0.9,
	\flangfb, 0.6
);
)

Convenience.s(\psrand); // stop
Convenience.clear(\psrand); // house keeping -> free and clear all fxs associated with 'psrand'

// list all fxs in the Convenience system
Convenience.fxs

// list all param arguments of a specific fx
Convenience.fxargs(\flanger)

// for further examples check the class overview

::
