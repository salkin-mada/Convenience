CLASS:: Convenience

SUMMARY:: Load audio files into collections of buffers and sequence them

CATEGORIES:: Monsters of Arguments, Convenience, Semi Undocumented Classes

RELATED:: Overviews/ConvenientOverview


DESCRIPTION::

A tool for discovering surprising audio file mixtures.


CLASSMETHODS::

METHOD:: crawl

crawler loads folders of files for you.
(all buffers created is mono)

METHOD:: p

create a pattern sequencer and play it

METHOD:: s

stop pattern sequencer

METHOD:: get

return Buffer at folderkey and index

METHOD:: free

free buffers

METHOD:: size

returns number of files loaded in total

METHOD:: list
posts loaded folder keys and number of files in them
and returns a dictionary with folder keys and buffers

METHOD:: folders

returns a set of loaded folder keys

METHOD:: randomFolder

return random folder key


METHOD:: folderNum

returns folder key at dict key index, if you need to think in integers




INSTANCEMETHODS::



PRIVATE:: Cnitconvenience, prSynthName

EXAMPLES::

CODE::

z = Convenience;
// or
z = ZzzZzZzzzZz;

/* crawler loads folders in its way */
z.crawl

// no gui usage
z.crawl(Platform.resourceDir +/+ "sounds", depth: 0)

z.folderPaths // ses what folderPaths crawler found
s.boot;
z.list // get some info of what went down after boot

//minimum
z.p(\lay); // play at the beginning of first file in first folder
z.s(\lay); // stop

// play
z.p(\lay,
    tempo: 8.0,
    folder: \sounds,
    index: Prand([1,2,3], inf),
    pos: Pwhite(0.2,0.7),
    dur: Pseq([1,3,Rest(2),2], inf),
    rate: Pwhite(0.9,1.0) * Pstep([0.4,0.9,0.2], Prand([3,5,8], inf), inf),
    pan: Pwhite(-0.65,0.65),
    amp: 0.4
);
// slay
z.s(\lay)

// pitchshift
(
z.p(\ps,
	tempo: 145/60*4,
	tuningOnOff: 1,
	degree: Pseq([1,4,6,9], inf),
	octave: Pseq([5,6,7], inf),
	pitchShiftOnOff: 1,
	pitchRatio: Pwhite(0.2,0.5),
	formantRatio: Pwhite(0.8,5.2),
	folder: z.randomFolder.postln;,
	index: Pwhite(1,100).floor,
	cutoff: Psrp(0.01623).linexp(-1.0,1.0,100,1e3),
	pos: Pwhite(0.2,0.7),
	dur: Pseq([1,1,1,1,1,1,Rest(3),1,1,1,Rest(5)], inf),
	rate: Pwhite(0.9,1.0) * Pstep([0.4,0.9,0.2], Prand([3,5,8], inf), inf)+3,
	pan: Pwhite(-0.65,0.65),
	amp: 0.4,
	release: 7.0
);
)

z.s(\ps);

::
